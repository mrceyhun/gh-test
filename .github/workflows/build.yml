# Builds and publish spark/hadoop docker images
name: Build docker images
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  init-job:
    runs-on: ubuntu-latest
    outputs:
      git_tag: ${{ steps.step1.outputs.git_tag }}
      action: ${{ steps.step1.outputs.action }}
      docker_tag_py_version: ${{ steps.step1.outputs.tag_py_version }}
      docker_tag_date: ${{ steps.step1.outputs.tag_date }}
      docker_individual_images: ${{ steps.step1.outputs.individual_images }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - id: step1
        run: |
          # Get git tag
          echo "::set-output name=git_tag::${GITHUB_REF/refs\/tags\//}"
          
          # Get tag commit message
          GIT_TAG_MSG="$(git tag -l --format="%(contents)" $GITHUB_REF_NAME)"
          echo "Tag message:" $GIT_TAG_MSG
          
          # Define git tag commit message regex rules that users should obey to use functionalities
          REGEX_BUILD_ALL='Build spark all.*py=(.+) and date=(.+)'
          REGEX_BUILD_CMSMON_PY='Build spark cmsmon-py.*py=(.+)'
          REGEX_BUILD_CMSMON_HADOOP_BASE='Build spark cmsmon-hadoop-base.*py=(.+) and date=(.+)'
          REGEX_BUILD_INDIVIDUALS='Build spark -(.+)-.*spark3[_-]date=(.+)'
                 
          # Check that tag commit message obeys regex rules
 
          # Check all
          if [[ $GIT_TAG_MSG =~ $REGEX_BUILD_ALL && ! -z "${BASH_REMATCH[1]}" && ! -z "${BASH_REMATCH[2]}" ]]; then
              echo "Action: all, tag_py_version: ${BASH_REMATCH[1]}, tag_date: ${BASH_REMATCH[2]}"
              echo "::set-output name=action::all"
              echo "::set-output name=tag_py_version::${BASH_REMATCH[1]}"
              echo "::set-output name=tag_date::${BASH_REMATCH[2]}"
              exit 0
          fi

          # Check cmsmon-py
          if [[ $GIT_TAG_MSG =~ $REGEX_BUILD_CMSMON_PY && ! -z "${BASH_REMATCH[1]}" ]]; then
              echo "Action: cmsmon-py, tag_py_version: ${BASH_REMATCH[1]}"
              echo "::set-output name=action::cmsmon-py"
              echo "::set-output name=tag_py_version::${BASH_REMATCH[1]}"
              exit 0
          fi

          # Check cmsmon-hadoop-base
          if [[ $GIT_TAG_MSG =~ $REGEX_BUILD_CMSMON_HADOOP_BASE && ! -z "${BASH_REMATCH[1]}" && ! -z "${BASH_REMATCH[2]}" ]]; then
              echo "Action: cmsmon-hadoop-base, tag_py_version: ${BASH_REMATCH[1]}, tag_date: ${BASH_REMATCH[2]}"
              echo "::set-output name=action::cmsmon-hadoop-base"
              echo "::set-output name=tag_py_version::${BASH_REMATCH[1]}"
              echo "::set-output name=tag_date::${BASH_REMATCH[2]}"
              exit 0
          fi

          # Check individuals
          if [[ $GIT_TAG_MSG =~ $REGEX_BUILD_INDIVIDUALS && ! -z "${BASH_REMATCH[1]}" && ! -z "${BASH_REMATCH[2]}" ]]; then
              echo "Action: individuals, individual_images: ${BASH_REMATCH[1]}, tag_date: ${BASH_REMATCH[2]}"
              echo "::set-output name=action::individuals"
              echo "::set-output name=individual_images::${BASH_REMATCH[1]}"
              echo "::set-output name=tag_date::${BASH_REMATCH[2]}"
              exit 0
          fi
          
          # Fail message
          echo "failure"

  build-cmsmon-py:
    runs-on: ubuntu-latest
    needs: init-job
    if: ${{ (needs.init-job.outputs.action == 'all') || (needs.init-job.outputs.action == 'cmsmon-py') }}
    name: Build cmsmon-py
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Get cmsmon-py Dockerfile
        run: |
          echo PY_VERSION: ${{ needs.init-job.outputs.docker_tag_py_version }}
          curl -ksLO https://raw.githubusercontent.com/mrceyhun/CMSKubernetes/f-deploy-update/docker/cmsmon-py/Dockerfile
      - name: Login to registry.cern.ch
        uses: docker/login-action@v1
        with:
          registry: registry.cern.ch
          username: ${{ secrets.CERN_LOGIN }}
          password: ${{ secrets.CERN_TOKEN }}
      - name: Publish cmsmon-py image to registry.cern.ch
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          build-args: |
            PY_VERSION=${{ needs.init-job.outputs.docker_tag_py_version }}
          tags: registry.cern.ch/cmsmonitoring/cmsmon-py:${{ needs.init-job.outputs.docker_tag_py_version }}

#  build-cmsmon-hadoop-base:
#    runs-on: ubuntu-latest
#    needs: init-job
#    if: ${{ (needs.init-job.outputs.action == 'all') || (needs.init-job.outputs.action == 'cmsmon-hadoop-base') }}
#    name: Build cmsmon-hadoop-base
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          ref: ${{ github.ref }}
#      - name: Get cmsmon-hadoop-base spark3 Dockerfile
#        run: |
#          echo PY_VERSION: ${{ needs.init-job.outputs.docker_tag_py_version }}
#          echo DATE_TAG: ${{ needs.init-job.outputs.docker_tag_date }}
#          # Download folder since all the files should exist in the context
#          curl -L https://api.github.com/repos/mrceyhun/CMSKubernetes/tarball/f-deploy-update | tar xvz --wildcards */docker/cmsmon-hadoop-base/* --strip-components 3 -C .
#          cp Dockerfile-spark3 Dockerfile
#      - name: Login to registry.cern.ch
#        uses: docker/login-action@v1
#        with:
#          registry: registry.cern.ch
#          username: ${{ secrets.CERN_LOGIN }}
#          password: ${{ secrets.CERN_TOKEN }}
#      - name: Publish cmsmon-hadoop-base image to registry.cern.ch
#        uses: docker/build-push-action@v2
#        with:
#          context: ./
#          file: ./Dockerfile
#          push: true
#          build-args: |
#            PY_VERSION=${{ needs.init-job.outputs.docker_tag_py_version }}
#          tags: registry.cern.ch/cmsmonitoring/cmsmon-hadoop-base:spark3-${{ needs.init-job.outputs.docker_tag_date }}

  build-cmsmon-rucio-ds:
    runs-on: ubuntu-latest
    needs: init-job
    if: ${{ (needs.init-job.outputs.action == 'all') || (contains(needs.init-job.outputs.docker_individual_images, 'cmsmon-rucio-ds')) }}
    name: Build cmsmon-rucio-ds
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Get cmsmon-rucio-ds Dockerfile
        run: |
          echo DATE_TAG: ${{ needs.init-job.outputs.docker_tag_date }}
          curl -ksLO https://raw.githubusercontent.com/mrceyhun/CMSKubernetes/f-deploy-update/docker/cmsmon-rucio-ds/Dockerfile
      - name: Login to registry.cern.ch
        uses: docker/login-action@v1
        with:
          registry: registry.cern.ch
          username: ${{ secrets.CERN_LOGIN }}
          password: ${{ secrets.CERN_TOKEN }}
      - name: Publish cmsmon-rucio-ds image to registry.cern.ch
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          build-args: |
            SPARK3_IMAGE_TAG=${{ needs.init-job.outputs.docker_tag_date }}
            CMSSPARK_TAG=${{ needs.init-job.outputs.git_tag }}
          tags: registry.cern.ch/cmsmonitoring/cmsmon-rucio-ds:${{ needs.init-job.outputs.git_tag }}

  build-condor-cpu-eff:
    runs-on: ubuntu-latest
    needs: init-job
    if: ${{ (needs.init-job.outputs.action == 'all') || (contains(needs.init-job.outputs.docker_individual_images, 'condor-cpu-eff')) }}
    name: Build condor-cpu-eff
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Get condor-cpu-eff Dockerfile
        run: |
          echo DATE_TAG: ${{ needs.init-job.outputs.docker_tag_date }}
          curl -ksLO https://raw.githubusercontent.com/mrceyhun/CMSKubernetes/f-deploy-update/docker/condor-cpu-eff/Dockerfile
      - name: Login to registry.cern.ch
        uses: docker/login-action@v1
        with:
          registry: registry.cern.ch
          username: ${{ secrets.CERN_LOGIN }}
          password: ${{ secrets.CERN_TOKEN }}
      - name: Publish condor-cpu-eff image to registry.cern.ch
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          build-args: |
            SPARK3_IMAGE_TAG=${{ needs.init-job.outputs.docker_tag_date }}
            CMSSPARK_TAG=${{ needs.init-job.outputs.git_tag }}
          tags: registry.cern.ch/cmsmonitoring/condor-cpu-eff:${{ needs.init-job.outputs.git_tag }}

  build-cmsmon-rucio-spark2mng:
    runs-on: ubuntu-latest
    needs: init-job
    if: ${{ (needs.init-job.outputs.action == 'all') || (contains(needs.init-job.outputs.docker_individual_images, 'cmsmon-rucio-spark2mng')) }}
    name: Build cmsmon-rucio-spark2mng
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Get cmsmon-rucio-spark2mng Dockerfile
        run: |
          echo DATE_TAG: ${{ needs.init-job.outputs.docker_tag_date }}
          curl -ksLO https://raw.githubusercontent.com/mrceyhun/CMSKubernetes/f-deploy-update/docker/cmsmon-rucio-spark2mng/Dockerfile
      - name: Login to registry.cern.ch
        uses: docker/login-action@v1
        with:
          registry: registry.cern.ch
          username: ${{ secrets.CERN_LOGIN }}
          password: ${{ secrets.CERN_TOKEN }}
      - name: Publish cmsmon-rucio-spark2mng image to registry.cern.ch
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          build-args: |
            SPARK3_IMAGE_TAG=${{ needs.init-job.outputs.docker_tag_date }}
            CMSSPARK_TAG=${{ needs.init-job.outputs.git_tag }}
          tags: registry.cern.ch/cmsmonitoring/cmsmon-rucio-spark2mng:${{ needs.init-job.outputs.git_tag }}

