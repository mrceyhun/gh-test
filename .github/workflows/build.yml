# Builds and publish docker images
#
# !!!
#  While creating tags, tag commit message should obey these regex rules:
# !!!
#   "py=" value refers to "cmsmon-py" docker image tag and building the docker image with required python version
#   "date=" value refers to "cmsmon-hadoop-base" image tag that will be set and used in other images
#
name: Build docker images
on:
  push:
    tags:
      - 'v*.*.*'
jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      git_tag: ${{ steps.step1.outputs.git_tag }}
      action: ${{ steps.step1.outputs.action }}
      docker_tag_py_version: ${{ steps.step1.outputs.tag_py_version }}
      docker_tag_date: ${{ steps.step1.outputs.tag_date }}
      docker_individual_images: ${{ steps.step1.outputs.individual_images }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - id: step1
        run: |
          # Get git tag
          echo "::set-output name=git_tag::${GITHUB_REF/refs\/tags\//}"
          
          # Get tag commit message
          GIT_TAG_MSG="$(git tag -l --format="%(contents)" $GITHUB_REF_NAME)"
          echo "Tag message:" $GIT_TAG_MSG
          
          # Tag commit messages regex rules
          REGEX_BUILD_ALL='Build spark all.*py=(.+) and date=(.+)'
          REGEX_BUILD_CMSMON_PY='Build spark cmsmon-py.*py=(.+)'
          REGEX_BUILD_CMSMON_HADOOP_BASE='Build spark cmsmon-hadoop-base.*py=(.+) and date=(.+)'
          REGEX_BUILD_INDIVIDUALS='Build spark -(.+)-.*spark3[_-]date=(.+)'
                 
          # Check that tag commit message obeys regex rules
 
          # Check all
          if [[ $GIT_TAG_MSG =~ $REGEX_BUILD_ALL && ! -z "${BASH_REMATCH[1]}" && ! -z "${BASH_REMATCH[2]}" ]]; then
              echo "Action: all, tag_py_version: ${BASH_REMATCH[1]}, tag_date: ${BASH_REMATCH[2]}"
              echo "::set-output name=action::all"
              echo "::set-output name=tag_py_version::${BASH_REMATCH[1]}"
              echo "::set-output name=tag_date::${BASH_REMATCH[2]}"
              exit 0
          fi

          # Check cmsmon-py
          if [[ $GIT_TAG_MSG =~ $REGEX_BUILD_CMSMON_PY && ! -z "${BASH_REMATCH[1]}" ]]; then
              echo "Action: cmsmon-py, tag_py_version: ${BASH_REMATCH[1]}"
              echo "::set-output name=action::cmsmon-py"
              echo "::set-output name=tag_py_version::${BASH_REMATCH[1]}"
              exit 0
          fi

          # Check cmsmon-hadoop-base
          if [[ $GIT_TAG_MSG =~ $REGEX_BUILD_CMSMON_HADOOP_BASE && ! -z "${BASH_REMATCH[1]}" && ! -z "${BASH_REMATCH[2]}" ]]; then
              echo "Action: cmsmon-hadoop-base, tag_py_version: ${BASH_REMATCH[1]}, tag_date: ${BASH_REMATCH[2]}"
              echo "::set-output name=action::cmsmon-hadoop-base"
              echo "::set-output name=tag_py_version::${BASH_REMATCH[1]}"
              echo "::set-output name=tag_date::${BASH_REMATCH[2]}"
              exit 0
          fi

          # Check individuals
          if [[ $GIT_TAG_MSG =~ $REGEX_BUILD_INDIVIDUALS && ! -z "${BASH_REMATCH[1]}" && ! -z "${BASH_REMATCH[2]}" ]]; then
              echo "Action: individuals, individual_images: ${BASH_REMATCH[1]}, tag_date: ${BASH_REMATCH[2]}"
              echo "::set-output name=action::individuals"
              echo "::set-output name=individual_images::${BASH_REMATCH[1]}"
              echo "::set-output name=tag_date::${BASH_REMATCH[2]}"
              exit 0
          fi
          
          # Fail message
          echo "failure"

  build-cmsmon-py:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ (needs.check.outputs.action == 'all') || (needs.check.outputs.action == 'cmsmon-py') }}
    name: Build cmsmon-py
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Build cmsmon-py image
        run: |
          PY_VERSION=${{ needs.check.outputs.docker_tag_py_version }}
          echo "PY_VERSION: ${PY_VERSION}"
          curl -ksLO https://raw.githubusercontent.com/mrceyhun/CMSKubernetes/f-deploy-update/docker/cmsmon-py/Dockerfile 
          docker build . --build-arg PY_VERSION="$PY_VERSION" --tag docker.pkg.github.com/dmwm/cmsmon-py/cmsmon-py
          docker tag docker.pkg.github.com/dmwm/cmsmon-py/cmsmon-py registry.cern.ch/cmsmonitoring/cmsmon-py
      - name: Login to registry.cern.ch
        uses: docker/login-action@v1
        with:
          registry: registry.cern.ch
          username: ${{ secrets.CERN_LOGIN }}
          password: ${{ secrets.CERN_TOKEN }}
      - name: Publish cmsmon-py image to registry.cern.ch
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: registry.cern.ch/cmsmonitoring/cmsmon-py:${{ needs.check.outputs.docker_tag_py_version }}

